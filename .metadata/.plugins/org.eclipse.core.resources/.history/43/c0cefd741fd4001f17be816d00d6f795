package com.project.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.model.BookingList;
import com.project.model.Products;
import com.project.service.CartService;
import com.project.service.ProductsService;
import com.project.service.UsersService;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class CartController {
	private final ProductsService productsService;
	private final CartService cartService;	
	private final UsersService usersService;
	
	@GetMapping("/product")
	public String getProducts(Model model) {
		List<Products> products = productsService.showproduct();
    	System.out.print(products);
        model.addAttribute("products", products);
        return "product";  // product.jsp 페이지로 이동
	}
	
	@GetMapping("/booking")
	public String getBookingItem(Model model, HttpSession session) {
		Integer userId = (Integer) session.getAttribute("userId");
		 if (userId == null) {
		        userId = usersService.getDefaultUserId();; // 기본 사용자 ID 설정
		        session.setAttribute("userId", userId);
		    }
		List<BookingList> bookingItems = cartService.showbookingitem(userId);
		try {
	        ObjectMapper objectMapper = new ObjectMapper();
	        String cartItemsJson = objectMapper.writeValueAsString(bookingItems);
	        model.addAttribute("cartItemsJson", cartItemsJson); // JSON 문자열로 전달
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
//		model.addAttribute("cartItems", bookingItems);
		return "booking";
	}
	
//	 @PostMapping("/cart/delete")
//	    public String deleteSelected(@RequestParam String productIds, HttpSession session) {
//		 Integer userId = (Integer) session.getAttribute("userId");
//		 if(userId == null) {
//			 return "redirect:/login";
//		 }
//		 List<Integer> productIdList = Arrays.stream(productIds.split(","))
//			        .map(Integer::parseInt) // 문자열을 Integer로 변환
//			        .collect(Collectors.toList());
//
//			    // 변환된 productIdList 로그로 확인
//			    System.out.println("productIdList: " + productIdList);
//
//			    // 삭제하려는 상품이 있다면
//			    if (!productIdList.isEmpty()) {
//			        cartService.removeProductsFromCart(userId, productIdList);
//			    } else {
//			        System.out.println("삭제할 상품이 없습니다.");
//			    }
//		 return "redirect:/booking";
//	    }
	
	 @PostMapping("/deleteSelected")
	    public String deleteSelected(@RequestParam("productIds") String productIds) {
	        // productIds 값은 "1,2,3,NaN,5"와 같이 전달될 수 있음
	        String[] productIdsArray = productIds.split(",");
	        List<Integer> validProductIds = new ArrayList<>();
	        
	        for (String id : productIdsArray) {
	            try {
	                // id를 Integer로 변환하여 유효한 ID만 validProductIds에 추가
	                validProductIds.add(Integer.parseInt(id));
	            } catch (NumberFormatException e) {
	                // 잘못된 값은 무시하거나 로그를 남김
	                System.out.println("잘못된 ID 형식: " + id);
	            }
	        }

	        // validProductIds에는 유효한 ID들만 포함됨
	        // 이제 validProductIds를 사용해 필요한 로직을 처리

	        // 예: DB에서 상품 삭제 등
	        // cartService.deleteProducts(validProductIds);

	        return "redirect:/cart"; // 예시로 카트 페이지로 리다이렉트
	    }
	}
}
