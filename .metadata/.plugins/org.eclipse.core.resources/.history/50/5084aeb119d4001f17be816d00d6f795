
 const cartItems = ${cartItems};  // ${cartItems}가 이미 JSP로 넘겨진 데이터라고 가정
    console.log(cartItems);  // 이 값이 제대로 출력되는지 확인

function generateProductRows(cartItems) {
    const table = document.querySelector('.booking-table tbody');
    
  
    
    cartItems.forEach((item, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><input type="checkbox" class="select-check" data-id="${item.id}" onchange="updateShippingFee()"/></td>
            <td><img src="${item.imageUrl}" alt="${item.productName}"/><br/>${item.productName}</td>
            <td><p>${item.productDescription}</p></td>
            <td>${item.shippingFee}</td>
            <td>
                <div class="count">
                    <button onclick="decrease(${index})">-</button>
                    <input type="text" id="numberInput${index}" value="${item.quantity}" onchange="updateShippingFee()" min="0"/>
                    <button onclick="increase(${index})">+</button>
                </div>
                <p>수량</p>
            </td>
             <td id="price-${index}">${(parseFloat(item.price) * item.quantity).toFixed(2)}</td>
        `;
        table.appendChild(row);
    });
    updateShippingFee();  // 렌더링 후, 초기 가격/배송비 계산
}



function updateShippingFee() {
	 

    let totalShippingFee = 0;
    let totalPrice = 0;
    
    const checkboxes = document.querySelectorAll('.select-check');
    checkboxes.forEach(function(checkbox, index) {

            const shippingFee = parseFloat(cartItem.shippingFee);  // 배송비
            const price = parseFloat(cartItem.price);  // 가격
            const quantity = parseInt(document.getElementById(`numberInput${index}`).value);

            if (quantity > 0) {
                totalShippingFee += shippingFee;
                totalPrice += price * quantity;
            }
        }
    );
    const totalAmount = totalShippingFee + totalPrice;
  
    document.querySelector('.allprice').textContent = `배송비 ${totalShippingFee} + 가격 ${totalPrice} = ${totalAmount}원`;
}

function calculateTotalPrice() {
    let totalPrice = 0;
    const checkboxes = document.querySelectorAll('.select-check');
    checkboxes.forEach(function(checkbox, index) {
        if (checkbox.checked) {
            const quantity = document.getElementById(`numberInput${index}`).value;
            const price = products[index].price;
            totalPrice += price * quantity;
        }
    });
    return totalPrice;
}




function increase(index){
    var input = document.getElementById("numberInput" + index);
    var currentValue = parseInt(input.value);
    input.value = currentValue + 1;
    updateShippingFee();
}

function decrease(index){
    var input = document.getElementById("numberInput" + index);
    var currentValue = parseInt(input.value);
    if(currentValue > 0){
        input.value = currentValue - 1;
	    updateShippingFee();
    }else{
        alert("0보다 작을 수 없습니다.")
    }
}


function allCheck(){
    var allCheckbox = document.getElementById("all-check");
    var checkboxes = document.querySelectorAll(".select-check");
    checkboxes.forEach(function(checkbox){
        checkbox.checked = allCheckbox.checked;
    })
    updateShippingFee();
}

function order(){
    var selectedProduct = [];
    var row = document.querySelectorAll('.booking-table tbody tr');
    row.forEach(function(row,index){
        if(index>0){
            var checkbox = row.querySelector('.select-check');
            if(checkbox && checkbox.checked){
                var productName = row.querySelector('td:nth-child(2) img + br').nextSibling.nodeValue.trim();
                var productDetail = row.querySelector('td:nth-child(3) p').textContent.trim();
                var price = row.querySelector('td:nth-child(6)').textContent.trim();
                var input = row.querySelector('input[id^="numberInput"]');
                var image = row.querySelector('td:nth-child(2) img').src;
                var shippingFee = row.querySelector('td:nth-child(4)').textContent.trim();
                if(input){
                    var quantity = input.value;

                    var orderData = {
                        productName : productName,
                        productDetail : productDetail,
                        quantity : quantity,
                        price : price,
                        image : image,
                        shippingFee : shippingFee
                    }
                }
                selectedProduct.push(orderData);
            }
        }
    })

    if(selectedProduct.length>0){
        localStorage.setItem('orderData',JSON.stringify(selectedProduct));
        window.location.href = 'order.html';
    }else{
        alert('선택한 상품이 없습니다.')
    }
     if (selectedProduct.length > 0) {
        localStorage.setItem('orderData', JSON.stringify(selectedProduct));
        window.location.href = 'order.html';
    } else {
        alert('선택한 상품이 없습니다.');
    }

}

function deleteSelected() {
    const selectedIds = [];
    const checkboxes = document.querySelectorAll('.select-check:checked');
    const tableBody = document.querySelector('.booking-table tbody');

    checkboxes.forEach(function (checkbox) {
        const productId = checkbox.getAttribute('data-id');
        if (productId) {
            selectedIds.push(parseInt(productId, 10));
        }
    });

    if (selectedIds.length > 0) {
        $.ajax({
            url: '/cart/delete',
            type: 'POST',
            data: { productIds: selectedIds.join(',') },  // JSON이 아닌 URL 파라미터로 전달
            success: function () {
                checkboxes.forEach(function (checkbox) {
                    const row = checkbox.closest('tr');
                    if (row && row.parentNode === tableBody) {
                        tableBody.removeChild(row);
                    }
                });
                updateShippingFee();  // 삭제 후 배송비 업데이트
            },
            error: function () {
                alert('선택한 상품 삭제에 실패했습니다.');
            }
        });
    } else {
        alert('삭제할 상품을 선택하세요.');
    }
}